package de.upb.soot.frontends.java;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import de.upb.soot.core.SootClass;

import java.io.File;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import soot.G;
import soot.PackManager;
import soot.Scene;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.options.Options;

/**
 * 
 * @author Linghui Luo
 *
 */
public class WalaClassLoaderTest {
  @Test
  public void test() {
    G.v().reset();
    Options.v().set_whole_program(true);
    Options.v().setPhaseOption("cg.cha", "on");
    Options.v().setPhaseOption("cg", "all-reachable:true");

    String projectDir = new File("src/test/resources/android-target/ActivityLifecycle1").getAbsolutePath();
    Set<String> sourcePath = new HashSet<>();
    sourcePath.add(projectDir + File.separator + "src");
    sourcePath.add(projectDir + File.separator + "gen");
    Set<String> libPath = new HashSet<>();

    File libDir = new File(projectDir + File.separator + "libs");
    for (File file : libDir.listFiles()) {
      if (file.getName().endsWith(".jar")) {
        libPath.add(file.getAbsolutePath());
      }
    }
    libPath.add(new File("src/test/resources/android-target/platforms/android-17/android.jar").getAbsolutePath());
    String sootClassPath = "";
    for (String jarPath : libPath) {
      sootClassPath += File.pathSeparator + jarPath;
    }

    // load library class with old soot
    Options.v().set_soot_classpath(File.pathSeparator + sootClassPath);
    Scene.v().loadNecessaryClasses();

    // load application class with wala
    WalaClassLoader loader = new WalaClassLoader(sourcePath, libPath, null);
    List<SootClass> sootClasses = loader.getSootClasses();
    assertEquals(10, sootClasses.size());

    //convert apllication class to old jimple
    JimpleConverter jimpleConverter = new JimpleConverter(sootClasses);
    jimpleConverter.convertAllClasses();

    PackManager.v().getPack("cg").apply();
    HashMap<String, String> actual = saveCallGraph(Scene.v().getCallGraph());
    HashMap<String, String> expected = saveCallGraph(getCallGraphFromOldSoot());
    for (String src : expected.keySet()) {
      assertTrue(actual.containsKey(src));
    }
    //TODO. add more assertions. right now actual call graph has more edges than the call graph generated by old soot. 
  }

  private CallGraph getCallGraphFromOldSoot() {
    G.v().reset();
    Options.v().set_whole_program(true);
    Options.v().setPhaseOption("cg.cha", "on");
    Options.v().setPhaseOption("cg", "all-reachable:true");
    String projectDir = new File("src/test/resources/android-target/ActivityLifecycle1").getAbsolutePath();
    String sootClassPath = projectDir + File.separator + "ActivityLifecycle1.apk";
    sootClassPath += File.pathSeparator
        + new File("src/test/resources/android-target/platforms/android-17/android.jar").getAbsolutePath();
    Options.v().set_soot_classpath(File.pathSeparator + sootClassPath);
    Scene.v().loadNecessaryClasses();
    PackManager.v().getPack("cg").apply();
    return Scene.v().getCallGraph();
  }

  private HashMap<String, String> saveCallGraph(CallGraph cg) {
    HashMap<String, String> ret = new HashMap<>();
    Iterator<soot.jimple.toolkits.callgraph.Edge> it = cg.iterator();
    while (it.hasNext()) {
      soot.jimple.toolkits.callgraph.Edge edge = it.next();
      ret.put(edge.getSrc().toString(), edge.getTgt().toString());
    }
    return ret;
  }
}
