public class Operators extends java.lang.Object
{

    public void <init>()
    {
        Operators r0;

        r0 := @this: Operators;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addition(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void subtraction(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 - i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void multiplication(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 * i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void division(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 / i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void modulus(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 % i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void increment(int, int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void decrement(int, int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void simple_assignment_operators(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i0);

        return;
    }

    public void add_assignment_operator(int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i2 = 0 + i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void subtract_assignment_operator(int)
    {
        Operators r0;
        int i0;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        return;
    }

    public void multiply_assignment_operator(int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i2 = 0 * i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void divide_assignment_operator(int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i2 = 0 / i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void modulus_asssignment_operator(int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i2 = 0 % i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void left_shift_assignment_operator(int)
    {
        Operators r0;
        int i0, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i2 = 0 << 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void right_shift_assignment_operator(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;
        byte b2;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        b2 = 0 >> 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwise_and(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;
        byte b2;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        b2 = 0 & 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwise_xor(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;
        byte b2;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        b2 = 0 ^ 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwise_inc_or_assignment_operator(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;
        byte b2;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        b2 = 0 | 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void relational_equal_to(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void relational_not_equal_to(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void relational_greater_than(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void relational_less_than(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void relational_greater_than_equalto(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void relational_less_than_equalto(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void logical_OR(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void logical_AND(int, int)
    {
        Operators r0;
        int i0, i1;
        boolean $z1;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        if i0 <= i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void logical_NOT(int, int)
    {
        Operators r0;
        int i0, i1;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void bitwise_AND(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 & i1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_OR(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 | i1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_XOR(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 ^ i1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_compliment(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 ^ -1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_left_shift(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 << 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_right_shift(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 >> 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwise_right_shift_zerofill(int, int)
    {
        Operators r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 >>> 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void conditional_operator(int)
    {
        Operators r0;
        int i0;
        java.io.PrintStream $r1;
        byte $b3;

        r0 := @this: Operators;

        i0 := @parameter0: int;

        if i0 != 10 goto label1;

        goto label1;

     label1:
        if i0 != 0 goto label2;

        $b3 = 50;

        goto label3;

     label2:
        $b3 = 70;

     label3:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>($b3);

        return;
    }

    public void instanceof_operator()
    {
        Operators r0;
        boolean z0;
        java.io.PrintStream $r2;

        r0 := @this: Operators;

        z0 = "Java" instanceof java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(boolean)>(z0);

        return;
    }
}
