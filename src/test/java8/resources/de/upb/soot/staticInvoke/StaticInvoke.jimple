public class de.upb.soot.staticInvoke.StaticInvoke extends de.upb.soot.staticInvoke.A
{

    public void <init>()
    {
        de.upb.soot.staticInvoke.StaticInvoke r0;

        r0 := @this: de.upb.soot.staticInvoke.StaticInvoke;

        specialinvoke r0.<de.upb.soot.staticInvoke.A: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.NoSuchMethodException
    {
        java.lang.String[] r0;
        de.upb.soot.staticInvoke.StaticInvoke $r2;

        r0 := @parameter0: java.lang.String[];

        $r2 = new de.upb.soot.staticInvoke.StaticInvoke;

        specialinvoke $r2.<de.upb.soot.staticInvoke.StaticInvoke: void <init>()>();

        staticinvoke <de.upb.soot.staticInvoke.StaticInvoke: void static_invoke()>();

        staticinvoke <de.upb.soot.staticInvoke.StaticInvoke: void static_invoke_reflection()>();

        return;
    }

    public static void static_invoke() throws java.lang.NoSuchMethodException
    {
        staticinvoke <de.upb.soot.staticInvoke.A: int methodA()>();

        return;
    }

    public static void static_invoke_reflection() throws java.lang.NoSuchMethodException
    {
        java.lang.reflect.Method r1;
        de.upb.soot.staticInvoke.A $r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.Object[] $r5;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.IllegalAccessException $r8;

        $r2 = new de.upb.soot.staticInvoke.A;

        specialinvoke $r2.<de.upb.soot.staticInvoke.A: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("methodA", $r4);

     label1:
        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r5);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.IllegalAccessException: void printStackTrace()>();

        goto label5;

     label4:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }
}
