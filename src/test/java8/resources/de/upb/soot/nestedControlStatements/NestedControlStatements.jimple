public class NestedControlStatements extends java.lang.Object
{
    int a;
    int b;
    int c;

    public void <init>()
    {
        NestedControlStatements r0;

        r0 := @this: NestedControlStatements;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<NestedControlStatements: int a> = 10;

        r0.<NestedControlStatements: int b> = 20;

        r0.<NestedControlStatements: int c> = 30;

        return;
    }

    public void nested_switch_while(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r13;
        java.io.PrintStream $r2, $r9;
        java.lang.String $r7, $r14;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        if i0 >= i1 goto label4;

        lookupswitch(i0)
        {
            case 10: goto label2;
            default: goto label3;
        };

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SWITCH CASE: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is smaller than ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label3:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SWITCH DEFAULT: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is smaller than ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label1;

     label4:
        return;
    }

    public void nested_if_while(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2;
        java.io.PrintStream $r1, $r2;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        if i0 >= i2 goto label4;

        if i1 <= i2 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("c is greater than b");

        goto label3;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("b is greater than c");

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public void nested_for_while(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2, i3;
        java.io.PrintStream $r1;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        if i0 >= i1 goto label4;

        i3 = 0;

     label2:
        if i3 > i0 goto label3;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("for in while");

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public void nested_if_for(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2, i3;
        java.io.PrintStream $r1, $r2;

        r0 := @this: NestedControlStatements;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i1 goto label7;

        if i0 > i1 goto label2;

        if i2 <= i0 goto label3;

     label2:
        i1 = i1 + 1;

        goto label6;

     label3:
        if i1 == i0 goto label4;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Not equal");

        goto label6;

     label4:
        if i1 != i0 goto label5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Equal");

        goto label6;

     label5:
        if i0 <= i1 goto label6;

        if i2 <= i0 goto label6;

        i2 = i2 + -1;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;
    }

    public void nested_while_for(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2, i3;
        java.io.PrintStream $r1;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

     label2:
        if i0 >= i1 goto label3;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("a is smaller than b");

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    public void nested_switch_for(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r13;
        java.io.PrintStream $r2, $r9;
        java.lang.String $r7, $r14;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        lookupswitch(i0)
        {
            case 10: goto label2;
            default: goto label3;
        };

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SWITCH CASE: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is smaller than ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label3:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SWITCH DEFAULT: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is smaller than ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    public void nested_for_for(int, int, int)
    {
        NestedControlStatements r0;
        int i0, i1, i2, i3, i4;
        java.io.PrintStream $r1;

        r0 := @this: NestedControlStatements;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        i4 = 0;

     label2:
        if i4 > i3 goto label3;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("for in for");

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }
}
